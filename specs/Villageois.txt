service : Villageois
types: int, double, boolean, enum ERace {ORC, HUMAN}
observators :
	const race : [Villageois] → ERace
	const largeur : [Villageois] → int
	const hauteur : [Villageois] → int
	const force : [Villageois] → int
	const vitesse : [Villageois] → double
	posx: [Villageois] → int
	posy: [Villageois] → int
	pointsDeVie : [Villageois] → int
	quantiteOr : [Villageois] → int
	estMort : [Villageois] → boolean
Constructors :
	init : int x int x ERace × int × int × int × double × int → [Villageois]
		pre init(x,y, race,largeur,hauteur,force,vitesse,pointsVie) 
		require  	largeur%2=1 ∧ 
					hauteur%2=1 ∧
					force > 0 ∧ 
					vitesse > 0 ∧ 
					pointsVie > 0 ∧
					x > 0 ∧
					y > 0
Operators :
	retrait : [Villageois] × int → [Villageois]
		pre retrait(V,s) require ¬estMort(V) ∧ s>0
	chargeOr : [Villageois] × int → [Villageois]
		pre chargeOr(V,s) require ¬estMort(V) ∧ s>0
	dechargeOr : [Villageois] × int → [Villageois]
		pre dechargeOr(V,s) require ¬estMort(V) ∧ s>0 ∧ s <= quantiteOr(V)
		
Observations :
	[invariants]
	estMort(V) min = pointsDeVie(V) ≤ 0

	[init]
	posx(init(x,y,s,l,h,f,v,p))=x
	posy(init(x,y,s,l,h,f,v,p))=y
	race(init(x,y,s,l,h,f,v,p))=s
	largeur(init(x,y,s,l,h,f,v,p))=l
	hauteur(init(x,y,s,l,h,f,v,p))=h
	force(init(x,y,s,l,h,f,v,p))=f
	vitesse(init(x,y,s,l,h,f,v,p))=v
	pointsDeVie(init(x,y,s,l,h,f,v,p))=p
	quantiteOr(init(x,y,s,l,h,f,v,p))=0


	[retrait]
	pointsDeVie(retrait(V,s))=pointsDeVie(V)@pre -s
	quantiteOr(retrait(V,s))=quantiteOr(V)@pre
	
	[chargeOr]
	pointsDeVie(chargeOr(V,s))=pointsDeVie(V)
	quantiteOr(chargeOr(V,s))=quantiteOr(V)@pre + s
	
	[dechargeOr]
	pointsDeVie(dechargeOr(V,s))=pointsDeVie(V)
	quantiteOr(dechargeOr(V,s))=quantiteOr(V)@pre - s
