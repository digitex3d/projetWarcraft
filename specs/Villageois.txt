service : Villageois
types: int, double, boolean, enum ERace {ORC, HUMAN}
observators :
	const race : [Villageois] → ERace
	const largeur : [Villageois] → int
	const hauteur : [Villageois] → int
	const force : [Villageois] → int
	const vitesse : [Villageois] → double
	posx: [Villageois] → int
	posy: [Villageois] → int
	pointsDeVie : [Villageois] → int
	quantiteOr : [Villageois] → int
	estMort : [Villageois] → boolean
	corvee: [Villageois] → int
	estOccupe: [Villageois] → boolean

Constructors :
	init : int x int x ERace × int × int × int × double × int → [Villageois]
		pre init(x,y, race,largeur,hauteur,force,vitesse,pointsVie) 
		require  	largeur%2=1 ∧ 
					hauteur%2=1 ∧
					force > 0 ∧ 
					vitesse > 0 ∧ 
					pointsVie > 0 ∧
					x > 0 ∧
					y > 0
Operators :
	retrait : [Villageois] × int → [Villageois]
		pre retrait(V, s) require ¬estMort(V) ∧ ¬estOccupe(V) ∧ s > 0
	chargeOr : [Villageois] × int → [Villageois]
		pre chargeOr(V, s) require ¬estMort(V) ∧ s > 0
	dechargeOr : [Villageois] × int → [Villageois]
		pre dechargeOr(V, s) require ¬estMort(V) ∧ s > 0 ∧ s <= quantiteOr(V)
	setCorvee: [Villageois] × int → [Villageois]
		pre setCorvee(V, s) require ¬estMort(V) ∧ ¬estOccupe(V) ∧ s > 0
	decrCorvee: [Villageois] → [Villageois]
		pre decrCorvee(V) require ¬estMort(V) ∧ estOccupe(V)

Observations :
	[invariants]
	estMort(V) min = pointsDeVie(V) ≤ 0
	estOccupe(V) min= corvee > 0
	corvee(V) >= 0

	[init]
	posx(init(x,y,s,l,h,f,v,p))=x
	posy(init(x,y,s,l,h,f,v,p))=y
	race(init(x,y,s,l,h,f,v,p))=s
	largeur(init(x,y,s,l,h,f,v,p))=l
	hauteur(init(x,y,s,l,h,f,v,p))=h
	force(init(x,y,s,l,h,f,v,p))=f
	vitesse(init(x,y,s,l,h,f,v,p))=v
	pointsDeVie(init(x,y,s,l,h,f,v,p))=p
	quantiteOr(init(x,y,s,l,h,f,v,p))=0
	corvee(init(x,y,s,l,h,f,v,p)) = 0

	[retrait]
	pointsDeVie(retrait(V,s)) = pointsDeVie(V) - s
	quantiteOr(retrait(V,s)) = quantiteOr(V)
	corvee(retrait(V,s)) = corvee(V)
	posx(retrait(V,s)) = posx(V)	
	posy(retrait(V,s)) = posy(V)	

	[chargeOr]
	pointsDeVie(chargeOr(V,s)) = pointsDeVie(V)
	quantiteOr(chargeOr(V,s)) = quantiteOr(V) + s
	corvee(chargeOr(V,s)) = corvee(V)	
	posx(chargeOr(V,s)) = posx(V)	
	posy(chargeOr(V,s)) = posy(V)	
	
	[dechargeOr]
	pointsDeVie(dechargeOr(V,s)) = pointsDeVie(V)
	quantiteOr(dechargeOr(V,s)) = quantiteOr(V) - s
	corvee(dechargeOr(V,s)) = corvee(V)
	posx(dechargeOr(V,s)) = posx(V)	
	posy(dechargeOr(V,s)) = posy(V)	

	[setCorvee]
	pointsDeVie(setCorvee(V,s)) = pointsDeVie(V)
	quantiteOr(setCorvee(V,s)) = quantiteOr(V)
	corvee(setCorvee(V,s)) = s
	posx(setCorvee(V,s)) = posx(V)	
	posy(setCorvee(V,s)) = posy(V)	
		
	[decrCorvee]
	pointsDeVie(decrCorvee(V)) = pointsDeVie(V)
	quantiteOr(decrCorvee(V)) = quantiteOr(V)
	corvee(decrCorvee(V)) = corvee(V) - 1
	posx(decrCorvee(V)) = posx(V)	
	posy(decrCorvee(V)) = posy(V)
